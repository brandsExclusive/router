/**
 * This file was auto-generated by @luxuryescapes/router.
 * Do not make direct changes to the file.
 */


import {
  NextFunction,
  Request as ExpressRequest,
  Response as ExpressResponse,
} from "express";
import { operations } from "./server";

export interface Schema<S> {
  schema: S;
}

type ResBody<
  O extends keyof operations,
  Response = operations[O]["responses"]
> = Response[keyof Response] extends Schema<infer S> ? S : never;

export interface Handler<
  O extends keyof operations,
  R = ResBody<O>,
  parameters = operations[O]["parameters"]
> {
  (
    req: ExpressRequest<
      parameters extends { path: any }
        ? parameters["path"]
        : Record<string, never>,
      R,
      parameters extends { body: { payload: any } }
        ? parameters["body"]["payload"]
        : Record<string, never>,
      parameters extends { query: any }
        ? parameters["query"]
        : Record<string, never>
    >,
    res: ExpressResponse<R>,
    next: NextFunction
  ): void | Promise<void>;
}
